WITH AGG_TRANSACTIONS AS (
    SELECT 
        STRFTIME('%Y-%m-%d', CREATED_AT) AS TRANSACTION_DATE,
        LEGAL_ENTITY,
        CCY,
        SUM(CASE WHEN AMOUNT > 0 THEN AMOUNT ELSE 0.0 END) AS CREDITS,
        SUM(CASE WHEN AMOUNT < 0 THEN AMOUNT ELSE 0.0 END) AS DEBITS
    FROM TRANSACTIONS
    WHERE PROFILE_ID = 2335669
    GROUP BY
        STRFTIME('%Y-%m-%d', CREATED_AT),
        LEGAL_ENTITY,
        CCY
),
-- CREATING ALL COMBINATIONS FOR DATE (COMING FROM A CALENDAR TABLE), LEGAL_ENTITY AND CURRENCY
-- IN A PROPER DB I EXPECT TO HAVE A CALENDAR TABLE (NOT TO CREATE ONE) AND A TABLE WITH ALL
-- CURRENCIES EACH LEGAL ENTITY IS ALLOWED TO OPERATE IN
COMBINATIONS AS (
    SELECT 
        A.DATE,
        B.LEGAL_ENTITY,
        C.CCY
    FROM CALENDAR AS A
    CROSS JOIN (SELECT DISTINCT LEGAL_ENTITY FROM TRANSACTIONS) AS B
    CROSS JOIN (SELECT DISTINCT CCY FROM TRANSACTIONS) AS C
),
-- CREATING A TABLE TO ALLOW CONVERT CURRENCIES EASILY INTO GBP, EUR AND USD,
-- SINCE THERE ARE ONLY 3 TARGET CURRENCIES, I EMPLOYED A NOT VERY ELEGANT/GENERAL SOLUTION (WHICH WOULD BE BASED ON RECURSION TO CREATE ALL PAIRS)
RATES_ADJUSTED AS (
    SELECT
        RATE_DATE,
        INTO_CURRENCY_CODE,
        FINAL_RATE AS RATE_GBP,
        FINAL_RATE / (SELECT FINAL_RATE FROM RATES WHERE INTO_CURRENCY_CODE = 'EUR') AS RATE_EUR,
        FINAL_RATE / (SELECT FINAL_RATE FROM RATES WHERE INTO_CURRENCY_CODE = 'USD') AS RATE_USD
    FROM RATES 
    WHERE FROM_CURRENCY_CODE = 'GBP'
)
-- FINAL TABLE THAT CONTAINS THE SAFEGUARDING LIABILITIES BY REFERENCE DATE AND LEGAL ENTITY
SELECT 
    LIABILITIES.REF_DATE,
    LIABILITIES.LEGAL_ENTITY,
    SUM(LIABILITIES.SAFEGUARDING_LIABILITY / RATES_ADJUSTED.RATE_GBP) AS SAFEGUARDING_LIABILITIES_GBP,
    SUM(LIABILITIES.SAFEGUARDING_LIABILITY / RATES_ADJUSTED.RATE_EUR) AS SAFEGUARDING_LIABILITIES_EUR,
    SUM(LIABILITIES.SAFEGUARDING_LIABILITY / RATES_ADJUSTED.RATE_USD) AS SAFEGUARDING_LIABILITIES_USD
FROM (
        SELECT 
            C.DATE AS REF_DATE,
            C.LEGAL_ENTITY,
            C.CCY,
            SUM(T.CREDITS) OVER (PARTITION BY C.LEGAL_ENTITY, C.CCY ORDER BY C.DATE) AS CREDITS_CUM,
            SUM(T.DEBITS) OVER (PARTITION BY C.LEGAL_ENTITY, C.CCY ORDER BY C.DATE) AS DEBITS_CUM,
            SUM(T.CREDITS) OVER (PARTITION BY C.LEGAL_ENTITY, C.CCY ORDER BY C.DATE) + SUM(T.DEBITS) OVER (PARTITION BY C.LEGAL_ENTITY, C.CCY ORDER BY C.DATE) AS SAFEGUARDING_LIABILITY
        FROM COMBINATIONS C
        LEFT JOIN AGG_TRANSACTIONS T
            ON T.TRANSACTION_DATE = C.DATE
               AND T.LEGAL_ENTITY = C.LEGAL_ENTITY
               AND T.CCY = C.CCY
    ) LIABILITIES
LEFT JOIN RATES_ADJUSTED RATES_ADJUSTED
    ON LIABILITIES.REF_DATE = RATES_ADJUSTED.RATE_DATE
    AND LIABILITIES.CCY = RATES_ADJUSTED.INTO_CURRENCY_CODE
WHERE LIABILITIES.REF_DATE = DATE('2021-04-27')
GROUP BY
    LIABILITIES.LEGAL_ENTITY,
    LIABILITIES.REF_DATE
    
    
    
    
    
   
