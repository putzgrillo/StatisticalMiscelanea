-- CREATE AGGREGATED TABLE BY DATE, ENTITY AND CURRENCY
WITH AGG_TRANSACTIONS AS (
    SELECT 
        STRFTIME('%Y-%m-%d', CREATED_AT) AS TRANSACTION_DATE,
        LEGAL_ENTITY,
        CCY,
        SUM(CASE WHEN AMOUNT > 0 THEN AMOUNT ELSE 0.0 END) AS CREDITS,
        SUM(CASE WHEN AMOUNT < 0 THEN AMOUNT ELSE 0.0 END) AS DEBITS
    FROM TRANSACTIONS
    WHERE CREATED_AT <= DATE('2021-04-30')        --- USELESS FILTER
    GROUP BY
        STRFTIME('%Y-%m-%d', CREATED_AT),
        LEGAL_ENTITY,
        CCY
),
-- CREATING ALL COMBINATIONS FOR DATE (COMING FROM A CALENDAR TABLE), LEGAL_ENTITY AND CURRENCY
-- IN A PROPER DB I EXPECT TO HAVE A CALENDAR TABLE (NOT TO CREATE ONE) AND A TABLE WITH ALL
-- CURRENCIES EACH LEGAL ENTITY IS ALLOWED TO OPERATE IN
COMBINATIONS AS (
    SELECT 
        A.DATE,
        B.LEGAL_ENTITY,
        C.CCY
    FROM CALENDAR AS A
    CROSS JOIN (SELECT DISTINCT LEGAL_ENTITY FROM TRANSACTIONS) AS B
    CROSS JOIN (SELECT DISTINCT CCY FROM TRANSACTIONS) AS C
)

-- FINAL TABLE THAT CONTAINS THE REFERENCE DATE, LEGAL ENTITY, CURRENCY (EVEN THE COMBINATIONS THAT THE COUNTRY HAS NOT OPERATED)
SELECT 
    REF_DATE,
    LEGAL_ENTITY,
    CCY,
    SAFEGUARDING_LIABILITY,
    SAFEGUARDING_LIABILITY - LAG(SAFEGUARDING_LIABILITY) OVER (PARTITION BY LEGAL_ENTITY, CCY ORDER BY REF_DATE) AS DELTA_SAFEGUARDING_LIABILITY
FROM (
        SELECT 
            C.DATE AS REF_DATE,
            C.LEGAL_ENTITY,
            C.CCY,
            --T.CREDITS,
            --T.DEBITS,
            --LAG(T.CREDITS) OVER (PARTITION BY C.LEGAL_ENTITY, C.CCY ORDER BY C.DATE) AS PREVIOUS_DAY_CREDITS,
            --LAG(T.DEBITS) OVER (PARTITION BY C.LEGAL_ENTITY, C.CCY ORDER BY C.DATE) AS PREVIOUS_DAY_DEBITS,
            --LEAD(T.CREDITS) OVER (PARTITION BY C.LEGAL_ENTITY, C.CCY ORDER BY C.DATE) AS FOLLOWING_DAY_CREDITS,
            --LEAD(T.DEBITS) OVER (PARTITION BY C.LEGAL_ENTITY, C.CCY ORDER BY C.DATE) AS FOLLOWING_DAY_DEBITS,
            --SUM(T.CREDITS) OVER (PARTITION BY C.LEGAL_ENTITY, C.CCY ORDER BY C.DATE) AS CREDITS_CUM,
            --SUM(T.DEBITS) OVER (PARTITION BY C.LEGAL_ENTITY, C.CCY ORDER BY C.DATE) AS DEBITS_CUM,
            SUM(T.CREDITS) OVER (PARTITION BY C.LEGAL_ENTITY, C.CCY ORDER BY C.DATE) + SUM(T.DEBITS) OVER (PARTITION BY C.LEGAL_ENTITY, C.CCY ORDER BY C.DATE) AS SAFEGUARDING_LIABILITY
        FROM COMBINATIONS C
        LEFT JOIN AGG_TRANSACTIONS T
            ON T.TRANSACTION_DATE = C.DATE
               AND T.LEGAL_ENTITY = C.LEGAL_ENTITY
               AND T.CCY = C.CCY
    ) 
WHERE REF_DATE >= DATE('2021-01-01')        -- BEGINNING TIME POINT OF DISPLAY (NOT AFFECTING THE CALCULATIONS)
ORDER BY 
    LEGAL_ENTITY,
    CCY,
    REF_DATE DESC
